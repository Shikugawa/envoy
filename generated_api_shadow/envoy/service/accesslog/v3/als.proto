syntax = "proto3";

package envoy.service.accesslog.v3;

import "envoy/config/core/v3/base.proto";
import "envoy/data/accesslog/v3/accesslog.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.service.accesslog.v3";
option java_outer_classname = "AlsProto";
option java_multiple_files = true;
option java_generic_services = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: gRPC Access Log Service (ALS)]

// Service for streaming access logs from Envoy to an access log server.
service AccessLogService {
  // Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
  // response to be sent as nothing would be done in the case of failure. The server should
  // disconnect if it expects Envoy to reconnect. This API is designed for high throughput with the
  // expectation that it might be lossy.
  rpc StreamAccessLogs(stream StreamAccessLogsMessage) returns (StreamAccessLogsResponse) {
  }

  // This endpoint provides acknowledgment of logs marked as requiring this.
  // The requirement for an acknowledgment can be set in
  // :ref:`critical_buffer_log_filter <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.critical_buffer_log_filter>`.
  // Log messages that match this filter will be guaranteed delivery. In order to guarantee
  // the arrival, this endpoint performs the following process.
  //
  // 1. A response message is returned for each log. The response message includes ACK/NACK status,
  //    and in case of NACK, the target log is not flushed but buffered by Envoy.
  // 2. Timeout for response message is set and if no message is returned within a certain time,
  //    it will be considered as unreachable and buffered by Envoy without flushing the target log. This timeout is set by
  //    :ref:`message_ack_timeout <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.message_ack_timeout>`.
  //
  // On the ALS receiver side, ACK is expected to be returned to indicate that the log was saved properly,
  // and NACK is expected to be returned when the log could not be saved due to some error.
  //
  // .. attention::
  //
  // Buffers for guaranteed reachability can be extremely memory-intensive. Therefore, the following points
  // should be considered when using this endpoint.
  //
  // 1. :ref:`critical_buffer_log_filter <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.critical_buffer_log_filter>`
  //    should be set strictly. A loose filter may encourage rapid buffer overwhelm and leading to OOM.
  // 2. :ref:`pending_critical_buffer_size_bytes <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig.pending_critical_buffer_size_bytes>`
  //    should be set appropriately to prevent OOM.
  // 3. Make sure that ALS receiver is implemented properly. If it is not implemented, all messages will
  //    be buffered, which may cause OOM soon.
  rpc CriticalAccessLogs(stream CriticalAccessLogsMessage)
      returns (stream CriticalAccessLogsResponse) {
  }
}

// Empty response for the StreamAccessLogs API. Will never be sent. See below.
message StreamAccessLogsResponse {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.accesslog.v2.StreamAccessLogsResponse";
}

// Response received to identify undelivered or delivered messages in CriticalAccessLogs.
message CriticalAccessLogsResponse {
  enum Status {
    // Indicates that the message has been received.
    ACK = 0;

    // Indicates that the message has not been received.
    NACK = 1;
  }

  // This field is used to indicate the arrival status.
  Status status = 1;

  // Message ID that identifies a message.
  uint64 id = 2;
}

// Stream message for the StreamAccessLogs API. Envoy will open a stream to the server and stream
// access logs without ever expecting a response.
message StreamAccessLogsMessage {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.service.accesslog.v2.StreamAccessLogsMessage";

  message Identifier {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.service.accesslog.v2.StreamAccessLogsMessage.Identifier";

    // The node sending the access log messages over the stream.
    config.core.v3.Node node = 1 [(validate.rules).message = {required: true}];

    // The friendly name of the log configured in :ref:`CommonGrpcAccessLogConfig
    // <envoy_v3_api_msg_extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig>`.
    string log_name = 2 [(validate.rules).string = {min_len: 1}];
  }

  // Wrapper for batches of HTTP access log entries.
  message HTTPAccessLogEntries {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.service.accesslog.v2.StreamAccessLogsMessage.HTTPAccessLogEntries";

    repeated data.accesslog.v3.HTTPAccessLogEntry log_entry = 1
        [(validate.rules).repeated = {min_items: 1}];
  }

  // Wrapper for batches of TCP access log entries.
  message TCPAccessLogEntries {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.service.accesslog.v2.StreamAccessLogsMessage.TCPAccessLogEntries";

    repeated data.accesslog.v3.TCPAccessLogEntry log_entry = 1
        [(validate.rules).repeated = {min_items: 1}];
  }

  // Identifier data that will only be sent in the first message on the stream. This is effectively
  // structured metadata and is a performance optimization.
  Identifier identifier = 1;

  // Batches of log entries of a single type. Generally speaking, a given stream should only
  // ever include one type of log entry.
  oneof log_entries {
    option (validate.required) = true;

    HTTPAccessLogEntries http_logs = 2;

    TCPAccessLogEntries tcp_logs = 3;
  }
}

// Stream message for the CriticalAccessLogs API.
// Envoy opens a stream to the server and streams the access log,
// expecting a response. Each message sent is assigned an individual ID,
// and the state of the message is tracked based on the ID.
message CriticalAccessLogsMessage {
  // The body of the log message sent to CriticalAccessLogs.
  StreamAccessLogsMessage message = 1;

  // This is an ID to identify the message, and should be added to the Critical Endpoint
  // response message to uniquely identify the message being ACK/NACKed.
  uint64 id = 4;
}
